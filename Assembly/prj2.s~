!=================================================================
! General conventions:
!   1) Stack grows from high addresses to low addresses, and the
!      top of the stack points to valid data
!
!   2) Register usage is as implied by assembler names and manual
!
!   3) Function Calling Convention:
!
!       Setup)
!       * Immediately upon entering a function, push the RA on the stack.
!       * Next, push all the registers used by the function on the stack.
!
!       Teardown)
!       * Load the return value in $v0.
!       * Pop any saved registers from the stack back into the registers.
!       * Pop the RA back into $ra.
!       * Return by executing jalr $ra, $zero.
!=================================================================

!vector table
vector0:    .fill 0x00000000 !0
            .fill 0x00000000 !1
            .fill 0x00000000 !2
            .fill 0x00000000
            .fill 0x00000000 !4
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000 !8
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000
            .fill 0x00000000 !15
!end vector table

main:           la $sp, stack           ! Initialize stack pointer
                lw $sp, 0($sp)          
                
                ! Install timer interrupt handler into vector table
                la $at, ti_inthandler   !gets the address of the timer interrupt handler
		la $a0, vector0		!gets the address of the starting point of IVT
		sw $at, 1($a0)		!stores the address of the interrupt handler at IVT[1]

                ei                      ! Don't forget to enable interrupts...

                la $at, factorial       ! load address of factorial label into $at
                addi $a0, $zero, 5      ! $a0 = 5, the number to factorialize
                jalr $at, $ra           ! jump to factorial, set $ra to return addr
                halt                    ! when we return, just halt

factorial:      addi    $sp, $sp, -1    ! push RA
                sw      $ra, 0($sp)
                addi    $sp, $sp, -1    ! push a0
                sw      $a0, 0($sp)
                addi    $sp, $sp, -1    ! push s0
                sw      $s0, 0($sp)
                addi    $sp, $sp, -1    ! push s1
                sw      $s1, 0($sp)

                beq     $a0, $zero, base_zero
                addi    $s1, $zero, 1
                beq     $a0, $s1, base_one
                beq     $zero, $zero, recurse
                
    base_zero:  addi    $v0, $zero, 1   ! 0! = 1
                beq     $zero, $zero, done

    base_one:   addi    $v0, $zero, 1   ! 1! = 1
                beq     $zero, $zero, done

    recurse:    add     $s1, $a0, $zero     ! save n in s1
                addi    $a0, $a0, -1        ! n! = n * (n-1)!
                la      $at, factorial
                jalr    $at, $ra

                add     $s0, $v0, $zero     ! use s0 to store (n-1)!
                add     $v0, $zero, $zero   ! use v0 as sum register
        mul:    beq     $s1, $zero, done    ! use s1 as counter (from n to 0)
                add     $v0, $v0, $s0
                addi    $s1, $s1, -1
                beq     $zero, $zero, mul

    done:       lw      $s1, 0($sp)     ! pop s1
                addi    $sp, $sp, 1
                lw      $s0, 0($sp)     ! pop s0
                addi    $sp, $sp, 1
                lw      $a0, 0($sp)     ! pop a0
                addi    $sp, $sp, 1
                lw      $ra, 0($sp)     ! pop RA
                addi    $sp, $sp, 1
                jalr    $ra, $zero

ti_inthandler:	addi	$sp, $sp, -1
		sw 	$k0, 0($sp) 	!save the current value of $k0
		ei			!enable interrupt
			FIXME		!store all the registers

!interrupt timer		
		la	$at, seconds	!gets address for seconds
		lw	$a0, 0($at)	!gets value from seconds
		add	$a1, $a1, $zero	!check if seconds is 59
		addi	$a1, $a1, 59	!
		beq	$a1, $a0, min	!
		addi	$a0, $a0, 1	!add to seconds
		sw	$a0, 0($at)	!store back in to the memory
		beq	$zero, $zero, end	
min		sw	$zero 0($at)	!makes seconds back to zero
		lw	$a0, 1($at)	!gets value from minutes
		beq	$a1, $a0, hr	!check if minutes is 59
		addi	$a0, $a0, 1	!add to minutes
		sw	$a0, 1($at)	!store back in to the memory
		beq	$zero, $zero, end
hr		sw	$zero 1($at)	!makes minutes back to zero
		lw	$a0, 2($at)	!gets value from hours
		addi	$a0, $a0, 1	!add to hours
		sw	$a0, 2($at)	!store back in to the memory		
end				
		
			FIXME		!restore all the registers
		di			!disable interrupt
		addi	$sp, $sp, 1	
		lw 	$k0, 0($sp)	!load the $k0 to jump back
		reti			!return from interrupt
		

stack:      .fill 0xA00000
seconds:    .fill 0xFFFFFC
minutes:    .fill 0xFFFFFD
hours:      .fill 0xFFFFFE
